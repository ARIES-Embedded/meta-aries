From 9bbc9cc21e105c54b8ee0609d728ea2ed04add74 Mon Sep 17 00:00:00 2001
From: Ong Hean Loong <hean.loong.ong@intel.com>
Date: Mon, 19 Dec 2016 17:04:48 +0800
Subject: [PATCH 5/6] FogBugz #421702-2: implement Frame Buffer II for Display
 Port IP

Frame Buffer II implemntation for Display Port IP. The Intel PSG
(Altera) Video Image Processing Suite requires the Frame Reader
to be updated to Frame Buffer II. A new driver is required to
support the CSR for Frame Buffer II.

Signed-off-by: Ong Hean Loong <hean.loong.ong@intel.com>
---
 drivers/video/fbdev/Kconfig          |  22 +++++
 drivers/video/fbdev/Makefile         |   3 +
 drivers/video/fbdev/altvipfb2-plat.c | 136 +++++++++++++++++++++++++
 drivers/video/fbdev/altvipfb2.c      | 187 +++++++++++++++++++++++++++++++++++
 drivers/video/fbdev/altvipfb2.h      |  48 +++++++++
 5 files changed, 396 insertions(+)
 create mode 100644 drivers/video/fbdev/altvipfb2-plat.c
 create mode 100644 drivers/video/fbdev/altvipfb2.c
 create mode 100644 drivers/video/fbdev/altvipfb2.h

diff --git a/drivers/video/fbdev/Kconfig b/drivers/video/fbdev/Kconfig
index d480b7a..c4bcc54 100644
--- a/drivers/video/fbdev/Kconfig
+++ b/drivers/video/fbdev/Kconfig
@@ -246,6 +246,28 @@ config FB_ALTERA_VIP
 	  This driver supports the Altera Video and Image Processing(VIP)
 	  Frame Reader
 
+config FB_ALTERA_VIP_FB2
+    tristate "Altera VIP Frame Buffer II framebuffer support"
+	depends on FB
+    select FB_CFB_FILLRECT
+    select FB_CFB_COPYAREA
+    select FB_CFB_IMAGEBLIT
+	---help---
+     This driver supports the Altera Video and Image Processing(VIP)
+     Frame Buffer II. This core driver only supports Arria 10 HW and newer
+	 families of FPGA
+
+config FB_ALTERA_VIP_FB2_PLAT
+	tristate "Altera VIP Frame Buffer II framebuffer support OF Device"
+	depends on FB && OF
+	select FB_CFB_FILLRECT
+	select FB_CFB_COPYAREA
+	select FB_CFB_IMAGEBLIT
+    ---help---
+     This driver supports the Altera Video and Image Processing(VIP)
+     Frame Buffer II. This driver only supports Arria 10 HW
+     and newer families of FPGA on the OF Device
+
 config FB_GRVGA
 	tristate "Aeroflex Gaisler framebuffer support"
 	depends on FB && SPARC
diff --git a/drivers/video/fbdev/Makefile b/drivers/video/fbdev/Makefile
index 49ca148..d23d876 100644
--- a/drivers/video/fbdev/Makefile
+++ b/drivers/video/fbdev/Makefile
@@ -12,6 +12,9 @@ obj-$(CONFIG_FB_WMT_GE_ROPS)   += wmt_ge_rops.o
 
 # Hardware specific drivers go first
 obj-$(CONFIG_FB_ALTERA_VIP)	  += altvipfb.o
+obj-$(CONFIG_FB_ALTERA_VIP_FB2) += altvipfb2.o
+obj-$(CONFIG_FB_ALTERA_VIP_FB2_PLAT) += altvipfb2_drv.o
+altvipfb2_drv-objs := altvipfb2-plat.o altvipfb2.o
 obj-$(CONFIG_FB_AMIGA)            += amifb.o c2p_planar.o
 obj-$(CONFIG_FB_ARC)              += arcfb.o
 obj-$(CONFIG_FB_CLPS711X)	  += clps711x-fb.o
diff --git a/drivers/video/fbdev/altvipfb2-plat.c b/drivers/video/fbdev/altvipfb2-plat.c
new file mode 100644
index 00000000..251a792
--- /dev/null
+++ b/drivers/video/fbdev/altvipfb2-plat.c
@@ -0,0 +1,136 @@
+/*
+ * Copyright (C) 2017 Intel Corporation
+ *
+ * Intel Video and Image Processing(VIP) Frame Buffer II driver
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms and conditions of the GNU General Public License,
+ * version 2, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include "altvipfb2.h"
+#include <linux/fb.h>
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+
+static int altvipfb2_of_setup(struct altvipfb2_priv *fbdev,
+			      struct platform_device *pdev)
+{
+	struct device_node *np = pdev->dev.of_node;
+	int ret;
+	int mem_word_width;
+	u32 bits_per_color;
+
+	ret = of_property_read_u32(np, "altr,max-width", &fbdev->info.var.xres);
+	if (ret) {
+		dev_err(&pdev->dev,
+			"Missing required parameter 'altr,max-width'");
+		return ret;
+	}
+	fbdev->info.var.xres_virtual = fbdev->info.var.xres,
+
+	ret = of_property_read_u32(np, "altr,max-height",
+				   &fbdev->info.var.yres);
+	if (ret) {
+		dev_err(&pdev->dev,
+			"Missing required parameter 'altr,max-height'");
+		return ret;
+	}
+	fbdev->info.var.yres_virtual = fbdev->info.var.yres;
+
+	ret = of_property_read_u32(np, "altr,bits-per-symbol", &bits_per_color);
+	if (ret) {
+		dev_err(&pdev->dev,
+			"Missing required parameter 'altr,bits-per-symbol'");
+		return ret;
+	}
+	if (bits_per_color != 8) {
+		dev_err(&pdev->dev,
+			"bits-per-color is set to %i. Currently only 8 is supported.",
+			bits_per_color);
+		return -ENODEV;
+	}
+	fbdev->info.var.bits_per_pixel = bits_per_color * BYTES_PER_PIXEL;
+
+	ret = of_property_read_u32(np, "altr,mem-port-width", &mem_word_width);
+	if (ret) {
+		dev_err(&pdev->dev,
+			"Missing required parameter 'altr,mem-port-width '");
+		return ret;
+	}
+	if (!(mem_word_width >= 32 && mem_word_width % 32 == 0)) {
+		dev_err(&pdev->dev,
+			"mem-word-width is set to %i. must be >= 32 and multiple of 32.",
+			 mem_word_width);
+		return -ENODEV;
+	}
+
+	fbdev->info.fix.line_length = (fbdev->info.var.xres *
+		(fbdev->info.var.bits_per_pixel >> 3));
+	fbdev->info.fix.smem_len =
+		fbdev->info.fix.line_length * fbdev->info.var.yres;
+
+	return 0;
+}
+
+static int altvipfb2_plat_probe(struct platform_device *pdev)
+{
+	int retval;
+
+	struct device *dev = &pdev->dev;
+	struct resource *reg_res;
+	struct altvipfb2_priv *fbdev;
+
+	fbdev = devm_kzalloc(dev, sizeof(*fbdev), GFP_KERNEL);
+	if (!fbdev)
+		return -ENOMEM;
+
+	reg_res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if (!reg_res)
+		return -ENODEV;
+
+	fbdev->base = devm_ioremap_resource(dev, reg_res);
+	if (IS_ERR(fbdev->base)) {
+		dev_err(dev, "devm_ioremap_resource failed\n");
+		retval = PTR_ERR(fbdev->base);
+		return -ENOMEM;
+	}
+
+	altvipfb2_of_setup(fbdev, pdev);
+
+	platform_set_drvdata(pdev, fbdev);
+
+	return altvipfb2_probe(dev, fbdev->base);
+}
+
+static int altvipfb2_plat_remove(struct platform_device *pdev)
+{
+	return altvipfb2_remove(&pdev->dev);
+}
+
+static const struct of_device_id altvipfb2_match[] = {
+	{ .compatible = "altr,vip-frame-buffer-2.0" },
+	{},
+};
+MODULE_DEVICE_TABLE(of, altvipfb2_match);
+
+static struct platform_driver altvipfb2_driver = {
+	.probe = altvipfb2_plat_probe,
+	.remove = altvipfb2_plat_remove,
+	.driver = {
+		.name = DRIVER_NAME,
+		.of_match_table = altvipfb2_match,
+	},
+};
+
+module_platform_driver(altvipfb2_driver);
diff --git a/drivers/video/fbdev/altvipfb2.c b/drivers/video/fbdev/altvipfb2.c
new file mode 100644
index 00000000..e6d3b1c
--- /dev/null
+++ b/drivers/video/fbdev/altvipfb2.c
@@ -0,0 +1,187 @@
+/*
+ * Copyright (C) 2017 Intel Corporation.
+ *
+ * Intel Video and Image Processing(VIP) Frame Buffer II driver.
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms and conditions of the GNU General Public License,
+ * version 2, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ * This is based on a driver made by Thomas Chou <thomas@wytron.com.tw> and
+ * Walter Goossens <waltergoossens@home.nl> This driver supports the Intel VIP
+ * Frame Buffer II component. A large portion of this file was derived from
+ * altvipfb2.c which was created by Chris Rauer <christopher.rauer@intel.com>.
+ * More info on the hardware can be found in the Intel Video and Image
+ * Processing Suite User Guide at this address
+ * http://www.altera.com/literature/ug/ug_vip.pdf.
+ *
+ */
+
+#include "altvipfb2.h"
+#include <linux/dma-mapping.h>
+#include <linux/fb.h>
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/list.h>
+#include <linux/module.h>
+
+static int altvipfb2_setcolreg(unsigned int regno, unsigned int red,
+			       unsigned int green, unsigned int blue,
+			       unsigned int transp, struct fb_info *info)
+{
+	/*
+	 *  Set a single color register. The values supplied have a 32 bit
+	 *  magnitude.
+	 *  Return != 0 for invalid regno.
+	 */
+
+	if (regno > 255)
+		return 1;
+
+	red >>= 8;
+	green >>= 8;
+	blue >>= 8;
+
+	if (regno < 255) {
+		((u32 *)info->pseudo_palette)[regno] =
+		((red & 255) << 16) | ((green & 255) << 8) | (blue & 255);
+	}
+
+	return 0;
+}
+
+static struct fb_ops altvipfb2_ops = {
+	.owner = THIS_MODULE,
+	.fb_fillrect = cfb_fillrect,
+	.fb_copyarea = cfb_copyarea,
+	.fb_imageblit = cfb_imageblit,
+	.fb_setcolreg = altvipfb2_setcolreg,
+};
+
+static void altvipfb2_start_hw(void __iomem *base, struct fb_info *info)
+{
+	/*
+	 * The frameinfo variable has to correspond to the size of the VIP Suite
+	 * Frame Reader register 7 which will determine the maximum size used
+	 * in this frameinfo
+	 */
+	u32 frameinfo =
+		readl(base + ALTVIPFB2_FRAME_READER) & 0x00ffffff;
+
+	writel(frameinfo, base + ALTVIPFB2_FRAME_INFO);
+
+	writel(info->fix.smem_start, base + ALTVIPFB2_FRAME_START);
+	/* Finally set the control register to 1 to start streaming */
+	writel(1, base + ALTVIPFB2_CONTROL);
+}
+
+static void altvipfb2_disable_hw(void __iomem *base)
+{
+	/* set the control register to 0 to stop streaming */
+	writel(0, base + ALTVIPFB2_CONTROL);
+}
+
+static void altvipfb2_setup_fb_info(struct altvipfb2_priv *fbpriv)
+{
+	struct fb_info *info = &fbpriv->info;
+
+	strncpy(info->fix.id, DRIVER_NAME, sizeof(info->fix.id));
+	info->fix.type = FB_TYPE_PACKED_PIXELS;
+	info->fix.visual = FB_VISUAL_TRUECOLOR;
+	info->fix.accel = FB_ACCEL_NONE;
+
+	info->fbops = &altvipfb2_ops;
+	info->var.activate = FB_ACTIVATE_NOW;
+	info->var.height = -1;
+	info->var.width = -1;
+	info->var.vmode = FB_VMODE_NONINTERLACED;
+
+	info->var.pixclock = 6734;
+	info->var.left_margin = 148;
+	info->var.right_margin = 88;
+	info->var.upper_margin = 36;
+	info->var.lower_margin = 4;
+	info->var.hsync_len = 44;
+	info->var.vsync_len = 5;
+
+	/* settings for 32bit pixels */
+	info->var.red.offset = 16;
+	info->var.red.length = 8;
+	info->var.red.msb_right = 0;
+	info->var.green.offset = 8;
+	info->var.green.length = 8;
+	info->var.green.msb_right = 0;
+	info->var.blue.offset = 0;
+	info->var.blue.length = 8;
+	info->var.blue.msb_right = 0;
+	info->pseudo_palette = fbpriv->pseudo_palette;
+
+	info->flags = FBINFO_FLAG_DEFAULT;
+}
+
+int altvipfb2_probe(struct device *dev, void __iomem *base)
+{
+	int retval;
+	void *fbmem_virt;
+	struct altvipfb2_priv *fbpriv = dev_get_drvdata(dev);
+
+	fbmem_virt = dma_alloc_coherent(NULL,
+					fbpriv->info.fix.smem_len,
+					(void *)&fbpriv->info.fix.smem_start,
+					GFP_KERNEL);
+	if (!fbmem_virt) {
+		dev_err(dev,
+			"altvipfb2: unable to allocate %d Bytes fb memory\n",
+			fbpriv->info.fix.smem_len);
+		return -ENOMEM;
+	}
+
+	fbpriv->info.screen_base = (char *)fbmem_virt;
+
+	retval = fb_alloc_cmap(&fbpriv->info.cmap, PALETTE_SIZE, 0);
+	if (retval < 0)
+		goto err_dma_free;
+
+	altvipfb2_setup_fb_info(fbpriv);
+
+	altvipfb2_start_hw(base, &fbpriv->info);
+
+	dev_info(dev, "fb%d: %s frame buffer device at 0x%x+0x%x\n",
+		 fbpriv->info.node, fbpriv->info.fix.id,
+		 (unsigned int)fbpriv->info.fix.smem_start,
+		 fbpriv->info.fix.smem_len);
+
+	return register_framebuffer(&fbpriv->info);
+
+err_dma_free:
+	fb_dealloc_cmap(&fbpriv->info.cmap);
+	dma_free_coherent(NULL, fbpriv->info.fix.smem_len, fbmem_virt,
+			  fbpriv->info.fix.smem_start);
+	return retval;
+}
+EXPORT_SYMBOL_GPL(altvipfb2_probe);
+
+int altvipfb2_remove(struct device *dev)
+{
+	struct altvipfb2_priv *fbpriv = dev_get_drvdata(dev);
+
+	altvipfb2_disable_hw(fbpriv->base);
+	dma_free_coherent(NULL, fbpriv->info.fix.smem_len,
+			(void *)&fbpriv->info.screen_base,
+			fbpriv->info.fix.smem_start);
+
+	return unregister_framebuffer(&fbpriv->info);
+}
+EXPORT_SYMBOL_GPL(altvipfb2_remove);
+
+MODULE_AUTHOR("Ong Hean Loong <hean.loong.ong@intel.com>");
+MODULE_DESCRIPTION("Altera VIP Frame Buffer II driver");
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/video/fbdev/altvipfb2.h b/drivers/video/fbdev/altvipfb2.h
new file mode 100644
index 00000000..ac61453
--- /dev/null
+++ b/drivers/video/fbdev/altvipfb2.h
@@ -0,0 +1,48 @@
+/*
+ * Copyright (C) 2017 Intel Corporation.
+ *
+ * Intel Video and Image Processing(VIP) Frame Buffer II driver.
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms and conditions of the GNU General Public License,
+ * version 2, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef _ALTVIPFB2_H
+#define _ALTVIPFB2_H
+#include <linux/io.h>
+#include <linux/fb.h>
+
+#define DRIVER_NAME	"altvipfb2"
+#define PALETTE_SIZE	256
+#define BYTES_PER_PIXEL		4
+
+/* control registers */
+#define ALTVIPFB2_CONTROL		0
+#define ALTVIPFB2_STATUS		0x4
+#define ALTVIPFB2_INTERRUPT		0x8
+#define ALTVIPFB2_FRAME_COUNTER		0xC
+#define ALTVIPFB2_FRAME_DROP		0x10
+#define ALTVIPFB2_FRAME_INFO		0x14
+#define ALTVIPFB2_FRAME_START		0x18
+#define ALTVIPFB2_FRAME_READER		0x1C
+
+int altvipfb2_probe(struct device *dev, void __iomem *base);
+int altvipfb2_remove(struct device *dev);
+
+struct altvipfb2_priv {
+	struct	fb_info info;
+	void	__iomem *base;
+	int		irq_base;
+	u32	pseudo_palette[PALETTE_SIZE];
+};
+
+#endif /* _ALTVIPFB2_H */
-- 
1.9.1

